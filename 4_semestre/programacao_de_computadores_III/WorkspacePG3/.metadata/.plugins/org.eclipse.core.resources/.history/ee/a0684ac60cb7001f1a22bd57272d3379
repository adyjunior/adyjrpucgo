#include "Persistencia.h"

namespace PC3 {

void Persistencia::gravar(Matriz const &matriz, std::string const &nomeDoArquivo){
	std::ofstream arquivoMatriz(nomeDoArquivoNoDisco.c_str());
try{
	std::string nomeDoArquivoNoDisco = "./arquivos/" + nomeDoArquivo;
	if(!arquivoMatriz.is_open()) throw(4);//arquivo nao pode ser aberto
	int linha  = matriz.getQuantidadeLinhas();
	int coluna = matriz.getQuantidadeColunas();
	arquivoMatriz<<linha<<std::endl;
	arquivoMatriz<<coluna<<std::endl;
	for(int i=0; i<linha; i++)
		for(int j=0; j<coluna; j++){
	   		int elemento = matriz.getElemento(i,j);
	   		arquivoMatriz<<elemento<<std::endl;
	   	}
	arquivoMatriz.close();


	}catch(int valorErro){
		arquivoMatriz.close();
		throw valorErro;

	}catch(std::ofstream::failure a){
		throw(4);
	}
}

Matriz *Persistencia::recuperar(std::string const &nomeDoArquivo){
	try{
	std::string nomeDoArquivoNoDisco = "./arquivos/" + nomeDoArquivo;
	std::ifstream arquivoMatriz(nomeDoArquivoNoDisco.c_str());
	if(!arquivoMatriz.is_open()) throw(4);//arquivo nao pode ser aberto
	int linha, coluna,a;
	arquivoMatriz>>linha;
	arquivoMatriz>>coluna;
	Matriz *matriz = new Matriz(linha,coluna);
	for(int i=0; i<linha; i++)
	   	for(int j=0; j<coluna; j++){
	   		arquivoMatriz>>a;
	   		matriz->setElemento(i,j,a);
	  	}
	arquivoMatriz.close();
	return matriz;

	}catch(int valorErro){
		throw valorErro;
	}catch(std::bad_alloc&){
		throw(0);
	}
	catch(std::ifstream::failure a){
		throw(4);
	}

}

}
